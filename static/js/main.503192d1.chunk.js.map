{"version":3,"sources":["utilities/color.js","components/Quote.js","containers/Scores.js","components/Input/index.js","containers/WriteQuote.js","components/Timer/index.js","containers/Game.js","containers/Join.js","containers/Wordsmyth.js","App.js","serviceWorker.js","index.js"],"names":["getRGB","color","h","charAt","substring","parseInt","Quote","this","props","quote","beginning","end","votes","origin","publicPlayer","bonus","status","player","phase","className","judge","title","name","onClick","sendRequest","disabled","style","visibility","map","id","Component","Scores","players","score","Input","state","_","uniqueId","helperText","onChange","bind","event","pattern","min","max","message","value","target","match","setState","label","rest","htmlFor","length","WriteQuote","setQuote","type","Timer","timer","width","time","total","first","0","1","2","3","4","Game","expectedRequest","request","playerName","gameId","sendObject","quotes","playerQuotes","displayQuotes","console","log","getRound","action","height","Join","new","username","rounds","join","create","alert","key","setField","toUpperCase","getInputs","Wordsmyth","connection","handleServerCommunication","leave","WebSocket","onopen","onerror","error","onmessage","e","comm","JSON","parse","data","onclose","checkCookie","document","documentElement","setProperty","includes","setUser","window","location","reload","stringify","response","setCookie","obj","self","waitForSocketConnection","callback","setTimeout","readyState","send","exminutes","d","Date","setTime","getTime","expires","cookie","cname","ca","split","i","c","indexOf","getCookie","undefined","requestStatus","getElementById","App","Boolean","hostname","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.503192d1.chunk.js","sourcesContent":["let getRGB = function(color) {\r\n    if(!color) return {};\r\n    let h = (color.charAt(0)===\"#\") ? color.substring(1,7) : color;\r\n\r\n    return {\r\n        \"--red\": parseInt(h.substring(0,2),16), \r\n        \"--green\": parseInt(h.substring(2,4),16),\r\n        \"--blue\": parseInt(h.substring(4,6),16)\r\n    }\r\n}\r\n\r\nexport { getRGB };","import React, { Component } from 'react';\r\nimport \"../styles/Quote.scss\";\r\nimport { getRGB } from '../utilities/color'\r\nimport { MdGavel as CurrentPlayer } from 'react-icons/md'\r\n\r\nimport { FaThumbsUp as BonusPoint } from 'react-icons/fa'\r\n\r\nclass Quote extends Component {\r\n\r\n   \r\n\r\n    render() {\r\n        let {beginning, end, votes, origin, publicPlayer, bonus} =  this.props.quote;\r\n        let {player, phase} = this.props.status;\r\n\r\n        let className = \"quoteBlock \" + (votes ? \"results\" : \"input\");\r\n        return (\r\n            <div className={className} >\r\n                <div className={'bonus_quote'}>\r\n                    <div className={`bonus ${(player.judge || phase === 3) && bonus ? \"visible\" : \"hidden\" }`} title={publicPlayer && publicPlayer.name + \" got a bonus point for creativity!\"}><BonusPoint/></div>\r\n                    <button \r\n                        onClick={()=> phase === 3 || this.props.sendRequest(this.props.quote)}\r\n                        disabled={this.props.disabled || votes}\r\n                        className={`box ${publicPlayer && publicPlayer.judge ? \"correct\" : \"\"}`}  \r\n                        style={getRGB(publicPlayer?.color)}\r\n                    >\r\n                        <div className=\"quote\">\r\n                            {publicPlayer && <div className=\"player\">\r\n                                {publicPlayer.name}\r\n                                <span \r\n                                    className=\"judge\" \r\n                                    style={{visibility: (publicPlayer.judge ? \"visible\" : \"hidden\")}}\r\n                                ><CurrentPlayer/></span>\r\n                                </div>}\r\n\r\n                                {phase===0 && <div className=\"origin\">{origin}</div>}\r\n                            {beginning + \"... \" + end}\r\n                        </div>\r\n                    </button>\r\n                </div>\r\n                <div>\r\n                {votes && <div className=\"votes\">\r\n                    {votes.map(player => {\r\n                        return (\r\n                            <div\r\n                                title={publicPlayer.judge ? `${player.name} voted for the correct quote!`: `${player.name} voted for ${publicPlayer.name}'s quote!`}\r\n                                id={player.name + \"_vote\"} \r\n                                className=\"vote\" \r\n                                style={getRGB(player.color)}>\r\n                                    {player.name}\r\n                            </div>\r\n                        )\r\n                    }\r\n                    )}\r\n                </div>}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n} export default Quote;","import React, { Component } from 'react';\r\nimport { getRGB } from '../utilities/color'\r\n\r\nimport { MdGavel as CurrentPlayer } from 'react-icons/md'\r\n\r\nimport \"../styles/Scores.scss\"\r\n\r\nclass Scores extends Component  {\r\n    render() {  \r\n        return (\r\n            <div className=\"scores\">\r\n                    {this.props.players.map(player => {\r\n                        return (\r\n                            <div \r\n                                title={player.judge ? player.name + \" is the judge!\" : player.name}\r\n                                className=\"score\"\r\n                                style={getRGB(player.color)}\r\n                            >\r\n                                {player.name}\r\n                                {this.props.phase>-1 && ` : ${player.score}`} \r\n                                {this.props.phase>-1 && <span className=\"judge\" style={{visibility: (player.judge ? \"visible\" : \"hidden\")}}>{<CurrentPlayer/>} </span>}\r\n                            </div>\r\n                        )\r\n                    })}\r\n            </div>\r\n        )\r\n    }\r\n} export default Scores;","import React, { Component } from 'react';\r\n\r\nimport _ from 'lodash'\r\nimport './styles.scss'\r\n\r\n\r\nclass Input extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            id : _.uniqueId('input_'),\r\n            helperText: \"\"\r\n        }\r\n        this.onChange = this.onChange.bind(this);\r\n    }\r\n\r\n    onChange(event) {\r\n        \r\n        const { pattern, min, max, message } = this.props;\r\n        const value = event.target.value;\r\n        \r\n        if(pattern && value && !value.match(pattern)) this.setState({helperText: message || \"Input is invalid.\"})\r\n        else if(min && value && parseInt(value) < min) this.setState({helperText:`Value must be greater than or equal to ${min}`})\r\n        else if(max && value && parseInt(value) > max) this.setState({helperText:`Value must be less than or equal to ${max}`})\r\n        else this.setState({helperText: \"\"})\r\n        \r\n        this.props.onChange(event);\r\n    }\r\n\r\n    render() {\r\n        const { label, id, onChange, ...rest } = this.props\r\n        return (\r\n            <div className=\"wordsmyth_input\" id={id} {...rest}>\r\n                {label && <label htmlFor={this.state.id}>{label}</label>}\r\n                <input\r\n                    id={this.state.id}\r\n                    onChange={this.onChange}\r\n                    {...rest}\r\n                />\r\n                {this.state.helperText.length > 0 && <span className=\"error\">{this.state.helperText}</span>}\r\n            </div>\r\n        )\r\n    }\r\n} export default Input;","import React, { Component } from 'react';\r\nimport Input from '../components/Input/index';\r\n\r\nimport \"../styles/WriteQuote.scss\"\r\n\r\nclass WriteQuote extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            quote: props.quote\r\n        }\r\n        this.setQuote = this.setQuote.bind(this);\r\n    }\r\n\r\n    setQuote(event) {\r\n        let { quote } = this.props\r\n        quote.end = event.target.value;\r\n        this.setState({quote})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"writing\">\r\n                <div id=\"beginning\">\r\n                    {this.props.quote.beginning + \"... \"}\r\n                </div>\r\n                <Input \r\n                    type=\"text\"\r\n                    id=\"quoteEnd\"\r\n                    disabled={this.props.disabled}\r\n                    onChange={this.setQuote}\r\n                />\r\n                <button disabled={this.props.disabled} onClick={()=>{this.props.sendRequest(this.state.quote);}}>Submit</button>\r\n            </div>\r\n        )\r\n    } \r\n} export default WriteQuote;\r\n","import React, { Component } from 'react';\r\n\r\nimport './styles.scss'\r\n\r\n\r\nclass Timer extends Component {\r\n    render() {\r\n        const { timer } = this.props\r\n        return (\r\n            <div className=\"wordsmyth_timer\">\r\n                <div className='timer' style={{width: `${parseInt(timer.time)/parseInt(timer.total)*100}%`}}></div>\r\n            </div>\r\n        )\r\n    }\r\n} export default Timer;","import React, { Component } from 'react';\r\n\r\nimport { MdGavel as CurrentPlayer } from 'react-icons/md'\r\n\r\nimport Quote from '../components/Quote';\r\nimport Scores from './Scores';\r\nimport WriteQuote from './WriteQuote';\r\n\r\nimport Timer from '../components/Timer/index'\r\n\r\nimport { getRGB } from '../utilities/color'\r\n\r\nimport \"../styles/Game.scss\"\r\n\r\nconst helperText = {\r\n    '-1' : {\r\n        judge: \"Waiting for more players to join!\",\r\n        players:  \"Waiting for more players to join!\",\r\n        first: \"Click start whenever you're ready!\"\r\n    },\r\n    0 : {\r\n        judge: \"Choose one of these real quotes! Your friends will make up their own endings for the one you choose!\",\r\n        players: \"Waiting for the judge to choose a quote now!\"\r\n    },\r\n    1 : {\r\n        judge: \"Waiting for your friends to write their own endings to the quote you've chosen!\",\r\n        players: \"Finish the quote! Try to make it realistic so you can fool your friends. Here's a hint: check your spelling and punctuation!\"\r\n    },\r\n    2 : {\r\n        judge: \"While you wait for your friends to guess the correct quote, feel free to award some bonus points for creativity!\",\r\n        players: \"Which quote do you think is the real one? Think carefully...\"\r\n    },\r\n    3 : {\r\n        judge: \"Let's see how everybody did!\",\r\n        players: \"Let's see how everybody did!\",\r\n        first: \"Click continue whenever you're ready!\"\r\n    },\r\n    4 : {\r\n        judge: \"Well done, everybody!\",\r\n        players:  \"Well done, everybody!\"\r\n    },\r\n}\r\n\r\nclass Game extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.sendRequest = this.sendRequest.bind(this);\r\n    }\r\n\r\n    \r\n\r\n    sendRequest(quote) {\r\n        if(quote.target) quote ={}\r\n        if(!this.props.status.expectedRequest) return;\r\n        let request = this.props.status.expectedRequest;\r\n        request.name = this.props.playerName;\r\n        request.gameId = this.props.gameId;\r\n        request.quote = quote;\r\n        this.props.sendObject(request);\r\n    }\r\n\r\n    getRound(status) {\r\n        let quotes = status.quotes || status.playerQuotes;\r\n        if(quotes) {\r\n            return (\r\n                <div>\r\n                    {status.phase !== 0 && (quotes.length>0\r\n                        ? <div id=\"quoteorigin\"> There's an old {quotes[0].origin} saying: </div> \r\n                        : <div id=\"emptyquotes\"> Looks like no one submitted this round.<br/> Is everyone okay? </div>)}\r\n                    {this.displayQuotes(status)}\r\n                </div>\r\n            )\r\n        }\r\n        return false;\r\n    }\r\n\r\n    displayQuotes(status) {\r\n        if(status.quotes) {\r\n            if(status.quotes.length > 1) return status.quotes.map( quote => <Quote status={status} quote={quote} sendRequest={this.sendRequest}/>)\r\n            else return <WriteQuote quote={status.quotes[0]} disabled={!this.props.status.expectedRequest} sendRequest={this.sendRequest}/>\r\n        } else if(status.playerQuotes) {\r\n            return status.playerQuotes.map( quote => <Quote disabled={!this.props.status.expectedRequest} status={status} quote={quote} sendRequest={this.sendRequest}/>)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let { status , timer} = this.props;\r\n        console.log(status.phase)\r\n        return (\r\n            <div id=\"game\">\r\n                <div id=\"header\" style={getRGB(status.player.color)}>\r\n                    <div id=\"top\">\r\n                        <div id=\"title\">Wordsmyth</div>\r\n                        <div id=\"info\" >\r\n                            <div id=\"username\">\r\n                                {this.props.playerName}\r\n                                <span \r\n                                    className=\"judge\" \r\n                                    title=\"You're the judge this round!\"\r\n                                    style={{visibility: (status.player.judge ? \"visible\" : \"hidden\")}}\r\n                                >\r\n                                    <CurrentPlayer/>\r\n                                </span>    \r\n                            </div>\r\n                            <div id=\"gameid\">{status.gameId}</div>\r\n                        </div>\r\n                    </div>\r\n                    {timer && timer.time > 0 && <Timer timer={timer}/>}\r\n                </div>\r\n                <div id=\"helperText\">{helperText[status.phase][status.player.judge ? 'judge' : 'players']}</div>\r\n                {this.getRound(status)}\r\n                {status.phase===4 && \r\n                    <div id=\"winner\">\r\n                        <div style={getRGB(status.players[0].color)} className=\"player\">\r\n                            {status.players[0].name}\r\n                        </div> \r\n                        won!\r\n                    </div>}\r\n                {status.expectedRequest && (status.phase === -1 || status.phase === 3) \r\n                    && <div id=\"waiting\">\r\n                            {helperText[status.phase].first}\r\n                            <button onClick={this.sendRequest}>{status.expectedRequest.action}</button>\r\n                        </div>}\r\n\r\n                {\r\n                    this.props.status.players && <Scores phase={status.phase} players={this.props.status.players}/>\r\n                }\r\n                {status.phase===4 && <button onClick={this.sendRequest}>{status.expectedRequest.action}</button>}\r\n\r\n                {status.phase===4 && <div style={{height:'30%'}}/>}\r\n            </div>\r\n        )\r\n    }\r\n\r\n} export default Game;","import React, { Component } from 'react';\r\n\r\nimport Input from '../components/Input/index';\r\n\r\nimport \"../styles/Join.scss\"\r\n\r\nclass Join extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            new: true,\r\n            username: \"\",\r\n            rounds: 3,\r\n            timer: 60,\r\n            gameId: \"\"\r\n        }\r\n\r\n        this.join = this.join.bind(this);\r\n        this.create = this.create.bind(this);\r\n    }\r\n\r\n    join(){\r\n        let request = {\r\n          'type': 'request',\r\n          'action': 'join',\r\n          'name': this.state.username,\r\n          'gameId': this.state.gameId\r\n        };\r\n        this.props.sendObject(request);\r\n    }\r\n\r\n    create(){\r\n        if(!this.state.username || this.state.username === \"\") alert(\"Please enter a username!\")\r\n        let request = {\r\n          'type': 'request',\r\n          'action': 'create',\r\n          'max_timer': this.state.timer,\r\n          'max_rounds': this.state.rounds,\r\n          'name': this.state.username\r\n        };\r\n        this.props.sendObject(request);\r\n    }\r\n\r\n    setField(key, value) {\r\n        this.setState({[key]: value})\r\n    }\r\n\r\n    getInputs() {\r\n        if(this.state.new) {\r\n            return (\r\n                <div id=\"form\">\r\n                    <Input\r\n                        onChange={(event)=>this.setField(\"username\", event.target.value)}\r\n                        value={this.state.username}\r\n                        type=\"text\"\r\n                        label=\"Player's name\"\r\n                    />\r\n                    <div id=\"params\">\r\n                        <Input\r\n                            onChange={(event)=>this.setField(\"rounds\", event.target.value)}\r\n                            value={this.state.rounds}\r\n                            type=\"number\"\r\n                            label=\"Number of rounds\"\r\n                            min={1}\r\n                            max={15}\r\n                        />\r\n                        <div className=\"spacer\"/>\r\n                        <Input\r\n                            onChange={(event)=>this.setField(\"timer\", event.target.value)}\r\n                            value={this.state.timer}\r\n                            type=\"number\"\r\n                            label=\"Timer (in seconds)\"\r\n                            min={30}\r\n                            max={360}\r\n                        />\r\n                    </div>\r\n                    <button onClick={this.create}>Create Game</button>\r\n                </div>\r\n            )\r\n        } else  {\r\n            return (\r\n                <div id=\"form\">\r\n                    <Input\r\n                        onChange={(event)=>this.setField(\"username\", event.target.value)}\r\n                        value={this.state.username}\r\n                        type=\"text\"\r\n                        label=\"Player's name\"\r\n                    />\r\n                    <Input\r\n                        onChange={(event)=>this.setField(\"gameId\", event.target.value.toUpperCase())}\r\n                        value={this.state.gameId}\r\n                        type=\"text\"\r\n                        label=\"Room code\"\r\n                        pattern={/^[a-zA-Z0-9]{6}$/}\r\n                        message=\"Game code must be alphanumeric and 6 characters long.\"\r\n                    />\r\n                    <button onClick={this.join}>Join Game</button>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div id=\"join\">\r\n                <div className=\"nav\">\r\n                    <div className={`navitem ${this.state.new ? \"selected\" : \"\"}`} onClick={()=>this.setState({new: true})}>Start a new Game?</div>\r\n                    <div className={`navitem ${!this.state.new  ? \"selected\" : \"\"}`} onClick={()=>this.setState({new: false})}>Or join a friend's?</div>\r\n                </div>\r\n                {this.getInputs()}\r\n            </div>\r\n        )\r\n    }\r\n} export default Join;","import React, { Component } from 'react';\r\n\r\nimport Game  from './Game';\r\nimport Join from './Join';\r\n\r\nimport \"../styles/Wordsmyth.scss\"\r\n\r\nclass Wordsmyth extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            playerName: \"\",\r\n            gameId: \"\",\r\n            status: {}\r\n        }\r\n\r\n        this.connection = null;\r\n\r\n        this.handleServerCommunication = this.handleServerCommunication.bind(this);\r\n        this.sendObject = this.sendObject.bind(this);\r\n        this.create = this.create.bind(this);\r\n        this.join = this.join.bind(this);\r\n        this.leave = this.leave.bind(this);\r\n        \r\n    }\r\n\r\n    componentDidMount() {\r\n        this.connection = new WebSocket('wss://server.amrictor.com');\r\n        this.connection.onopen = function () {\r\n            console.log('Connected!');\r\n        };\r\n        // Log errors\r\n        this.connection.onerror = function (error) {\r\n            console.log('WebSocket Error ' + error);\r\n            alert(\"Cannot reach server!\")\r\n        };\r\n        // Log messages from the server\r\n        this.connection.onmessage = function (e) {\r\n          // console.log('Server: ' + e.data);\r\n            let comm = JSON.parse(e.data);\r\n            this.handleServerCommunication(comm);\r\n        }.bind(this);\r\n    \r\n        this.connection.onclose = function (e) {\r\n            console.log('Connection lost');\r\n            // this.setCookie(\"\", \"\")\r\n          //THIS FUNCTION IS CALLED ON REFRESH IN FIREFOX BUT NOT CHROME\r\n          // DELETING COOKIES BREAKS FUNCTIONALITY IN FIREFOX\r\n        }\r\n        this.checkCookie();\r\n    }\r\n\r\n    handleServerCommunication(comm) {\r\n        switch(comm.type) {\r\n            case'status': this.setState({status: comm},  document.documentElement.style.setProperty('--buttonColor', this.state.status.color)); break;\r\n            case'response': \r\n                if(comm.message) {\r\n                    if(comm.message.includes(\"No game with code\") || comm.message.includes(\"Player does not exist\")) {\r\n                        this.setUser()\r\n                    }\r\n                    alert(comm.message);\r\n                }\r\n                else this.setUser(comm);\r\n            ;  break;\r\n            case'time': {\r\n                this.setState({timer: { time: comm.time, total: comm.total}})\r\n                break;\r\n            }\r\n            case'quit': {\r\n                this.setUser();\r\n                window.location.reload();\r\n                break;\r\n            }\r\n            default: alert(JSON.stringify(comm))\r\n\r\n        }\r\n    }\r\n\r\n    setUser(response) {\r\n        let {playerName, gameId} = response ? response : {playerName : \"\", gameId: \"\"};\r\n \r\n        this.setCookie(playerName, gameId, 1)\r\n        this.setState({playerName: playerName, gameId: gameId})\r\n    }\r\n\r\n    sendObject(obj){\r\n        let self = this;\r\n        function waitForSocketConnection(callback){\r\n            setTimeout(\r\n                function () {\r\n                    if (self.connection.readyState === 1) {\r\n                        if (callback != null){\r\n                            callback();\r\n                        }\r\n                    } else {\r\n                        waitForSocketConnection(callback);\r\n                    }\r\n\r\n                }, 5); // wait 5 milisecond for the connection...\r\n        }\r\n        waitForSocketConnection(() => self.connection.send(JSON.stringify(obj)));\r\n    }\r\n\r\n    setCookie(playerName, gameId, exminutes=0) {\r\n        var d = new Date();\r\n        d.setTime(d.getTime() + (exminutes * 60 * 1000));\r\n        var expires = (exminutes===0) ? \"\" : \"max-age=\"+(exminutes * 60 * 1000) + \";path=/\";\r\n        document.cookie = \"playerName=\" + playerName + \";\" + expires;\r\n        document.cookie = \"gameId=\" + gameId + \";\" + expires;\r\n    }\r\n\r\n    getCookie(cname) {\r\n        let name = cname + \"=\";\r\n        let ca = document.cookie.split(';');\r\n        for(let i = 0; i < ca.length; i++) {\r\n            let c = ca[i];\r\n            while (c.charAt(0) === ' ') {\r\n                c = c.substring(1);\r\n            }\r\n            if (c.indexOf(name) === 0) {\r\n                return c.substring(name.length, c.length);\r\n            }\r\n        }\r\n        return \"\";\r\n    }\r\n\r\n    checkCookie() {\r\n        let playerName = this.getCookie(\"playerName\");\r\n        let gameId = this.getCookie(\"gameId\");\r\n        if (playerName !== undefined) {\r\n            this.setState({playerName: playerName, gameId: gameId}, this.requestStatus);\r\n        }\r\n    }\r\n\r\n    requestStatus() {\r\n        if(this.state.playerName === \"undefined\" || this.state.gameId === \"undefined\") return\r\n        let request = {\r\n          'type': 'request',\r\n          'action': 'status',\r\n          'name': this.state.playerName,\r\n          'gameId': this.state.gameId\r\n        };\r\n        this.sendObject(request);\r\n    }\r\n\r\n    create(){\r\n        let username = document.getElementById(\"username\").value;\r\n        if(!username || username === \"\") alert(\"Please enter a username!\")\r\n        let request = {\r\n          'type': 'request',\r\n          'action': 'create',\r\n          'name': document.getElementById(\"username\").value\r\n        };\r\n        this.sendObject(request);\r\n    }\r\n\r\n    join(){\r\n        let request = {\r\n          'type': 'request',\r\n          'action': 'join',\r\n          'name': document.getElementById(\"username\").value,\r\n          'gameId': document.getElementById(\"gameid\").value\r\n        };\r\n        this.sendObject(request);\r\n    }\r\n    \r\n    leave(){\r\n        let request = {\r\n          'type': 'request',\r\n          'action': 'leave',\r\n          'name': this.state.playerName,\r\n          'gameId': this.state.gameId\r\n        };\r\n        this.sendObject(request);\r\n    }\r\n\r\n    render() {\r\n        if(this.state.status.player) return (\r\n            <Game status={this.state.status} timer={this.state.timer} sendObject={this.sendObject} playerName={this.state.playerName} gameId={this.state.gameId}/>        \r\n        );\r\n        else return (\r\n            <Join sendObject={this.sendObject}/>\r\n        );\r\n    }\r\n} export default Wordsmyth;","import React from 'react';\nimport './App.css';\nimport Wordsmyth from './containers/Wordsmyth';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Wordsmyth/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}